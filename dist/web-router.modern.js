import t from"lodash";let e={},n=!1,s=!0,o=null;const i=["[data-navigo]","[data-route]"];let l=i.slice(0),r=null;function a(e,n,s=null,o=(()=>{})){t.isFunction(n.hooks[e])?n.hooks[e]((t=!0)=>{t&&o(t)},s):t.isArray(n.hooks[e])?function e(n,s=null,o){if(!n.length)return o(!0);const i=t.head(n);t.isFunction(i)&&i((i=!0)=>{if(!i)return o(!1);e(t.tail(n),s,o)})}(n.hooks[e],s,(t=!0)=>{t&&o(t)}):o()}function c(e,n=null){return a("before",e,n,s=>{t.isArray(n)?e.method.apply({},n):e.method(n)})}function u(t,e=null,n=(t=>{})){return a("after",t,e,n)}function h(t){return o&&(n&&console.log("was a last resolve",o),function(t,e=null,n=(t=>{})){a("leave",o,e,n)}(0,t)),this.resolve(),this}function g(t){return Object.assign(this,t),this}class d{constructor(t={}){o=null;for(const e in t)this.on(e,t[e]);s&&(this.listen(),this.updatePageLinks())}on(s="/",o,i={}){n&&console.log(".on(",s,o,i,")");let l=s,r=!1;const a=[];if(t.isRegExp(s))r=!0,l=s.toString();else{const t=l.split("/").map(t=>t.startsWith(":")?(r=!0,a.push(t.slice(1)),"([^/]{1,})"):t);s=new RegExp("^"+t.join("/")+"$")}return e[l]=new g({name:l,regExp:r?s:null,regExpKeys:a,method:o,hooks:i}),this}off(...t){if(n&&console.log(".off(",t,")"),0===t.length)d.reset(),window.removeEventListener("popstate",h.bind(this),!1),delete window.hasListenerAttached;else{const[n]=t;delete e[n]}return this}listen(){return window.hasListenerAttached||(n&&console.log("listen() Attaching to window"),window.addEventListener("popstate",h.bind(this),!1),window.hasListenerAttached=!0),this}updatePageLinks(e=null){return n&&console.log("updatePageLinks",l),l.forEach(s=>{const o=document.querySelectorAll(s);t.forEach(o,t=>{t.hasListenerAttached||t.addEventListener("click",t=>{if(n&&console.log("CLICKED. Now navigate",t),(t.ctrlKey||t.metaKey)&&"a"===t.target.tagName.toLowerCase())return!1;t.preventDefault();const s=t.target.getAttribute("href");e?e.call(this,s):this.navigate(s)},!1),t.hasListenerAttached=!0})}),this}navigate(t,e=null){return window.history.pushState(e,null,t),this.resolve(),this}notFound(e){return t.isFunction(e)&&(r=e),this}resolve(t=window.location.pathname){n&&console.log("Resolve",t);let s=!1;for(const n in e){const i=e[n];if(i.regExp){if(i.regExp){const e=t.match(i.regExp)||[],n=e.slice(1,i.regExpKeys.length+1),l={};if(e&&e.length){n.forEach((t,e)=>{l[i.regExpKeys[e]]=t});const t=i.regExpKeys.length?l:e.slice(1);s=!0,o=i,c(i,t),u(i,t)}}}else n===t&&(s=!0,o=i,c(i,{}),u(i,null))}return s?n&&console.log("Route Matched",o):(o=null,r&&(n&&console.log("notFound"),r.call(this))),this}get all(){return e}static set autoListen(t){return s=!!t}static get routes(){return e}static get lastResolved(){return o}static reset(){e={},s=!0,o=null,r=null,l=i.slice(0)}static set debug(t){n=!!t}static addPageLinkSelectors(e=[]){l.push(...e),l=t.unique(l)}}export{d as WebRouter};
//# sourceMappingURL=web-router.modern.js.map
